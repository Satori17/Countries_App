//
//  CountryDetailViewController.swift
//  S.Kh_Task_21
//
//  Created by Saba Khitaridze on 11.08.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SDWebImageSVGCoder

protocol CountryDetailDisplayLogic: AnyObject {
    func displayCountryDetail(viewModel: CountryDetail.ViewModel)
}

class CountryDetailViewController: UIViewController {
    
    //MARK: - IBOutlets
    
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var flagImageView: UIImageView!
    @IBOutlet weak var capitalLabel: UILabel!
    @IBOutlet weak var alphaCodeLabel: UILabel!
    @IBOutlet weak var regionLabel: UILabel!
    @IBOutlet weak var populationLabel: UILabel!
    @IBOutlet weak var currencyStackView: UIStackView!
    
    
    //MARK: - Vars
    
    static let identifier = "CountryDetailViewController"
    var interactor: CountryDetailInteractorProtocol?
    //loading
    let activityIndicator = UIActivityIndicatorView()
    let customView = UIView()
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupSwipeGesture()
    }
    
    //MARK: - Methods
    
    private func setupSwipeGesture() {
        let swipeGesture = UISwipeGestureRecognizer(target: self, action: #selector(viewSwiped))
        swipeGesture.direction = .down
        view.addGestureRecognizer(swipeGesture)
    }
    
    @objc private func viewSwiped(_ sender: UISwipeGestureRecognizer) {
        if sender.direction == .down {
            dismiss(animated: true)
        }
    }
    
    func setupActivityIndicator() {
        customView.frame = self.view.frame
        customView.backgroundColor = .systemBackground
        activityIndicator.startAnimating()
        activityIndicator.hidesWhenStopped = true
        activityIndicator.style = UIActivityIndicatorView.Style.large
        activityIndicator.center = customView.center
        self.view.addSubview(customView)
        customView.addSubview(activityIndicator)
    }
}


extension CountryDetailViewController: CountryDetailDisplayLogic {
    
    func displayCountryDetail(viewModel: CountryDetail.ViewModel) {
        guard let url = URL(string: viewModel.flag) else { return }
        nameLabel.text = viewModel.name
        flagImageView.sd_setImage(with: url)
        capitalLabel.text = viewModel.capital
        alphaCodeLabel.text = viewModel.alphaCode
        regionLabel.text = viewModel.region
        populationLabel.text = "\(viewModel.pupulation)"
        viewModel.currencies.forEach { currency in
            addLabel(of: currency)
        }
    }
    
    private func addLabel(of currency: DetailCurrencyViewModel) {
        let label = UILabel()
        label.font = .systemFont(ofSize: 18, weight: .medium)
        label.translatesAutoresizingMaskIntoConstraints = false
        label.text = "\(currency.name), \(currency.symbol)"
        currencyStackView.addArrangedSubview(label)
    }
    
}
